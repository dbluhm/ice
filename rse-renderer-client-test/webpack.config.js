/**
 * This file has been autogenerated as it didn't exist or was made for an older incompatible version.
 * This file can be used for manual configuration will not be modified if the flowDefaults constant exists.
 */

const path = require('path');
const fs = require('fs');
const merge = require('webpack-merge');
const flowDefaults = require('./webpack.generated.js');

const GENERATED_PREFIX = '@Generated/';

/**
 * Recursive file matching with regex.
 */
function fileMatch(dir, regex) {
  let files = fs.readdirSync(dir, {withFileTypes: true});
  return files.reduce((acc, file) => {
    if (file.isDirectory()) {
      acc.push(...fileMatch(`${dir}/${file.name}`, regex));
    } else if (file.isFile() && file.name.match(regex)) {
      acc.push(`${dir}/${file.name}`);
    }
    return acc;
  }, []);
}

/**
 * Generated aliases for auto-generated typescript files in this project.
 */
function aliasGeneratedFiles() {
  let generated = fileMatch('target/generated-sources', /^[^.]+(?!\.d).ts$/);
  let aliases = generated.reduce((acc, file) => {
    acc[`${GENERATED_PREFIX}${path.basename(file, '.ts')}$`] = path.resolve(__dirname, `${file}`);
    return acc;
  }, {});
  console.warn('Generated aliases: ', aliases);
  return aliases;
}

module.exports = merge(flowDefaults, {
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.json'],
    alias: {
      DataElement$: path.resolve(__dirname, 'frontend/src/data-element.ts'),
      ...aliasGeneratedFiles()
    },
    modules: ['target/generated-sources', 'node_modules']
  },
  devtool: 'inline-source-map',
  module: {
    rules: [{
      // Include ts, tsx, js, and jsx files.
      test: /\.tsx?$/,
      exclude: /node_modules/,
      loader: 'ts-loader',
    }],
  }
});



/**
 * This file can be used to configure the flow plugin defaults.
 * <code>
 *   // Add a custom plugin
 *   flowDefaults.plugins.push(new MyPlugin());
 *
 *   // Update the rules to also transpile `.mjs` files
 *   if (!flowDefaults.module.rules[0].test) {
 *     throw "Unexpected structure in generated webpack config";
 *   }
 *   flowDefaults.module.rules[0].test = /\.m?js$/
 *
 *   // Include a custom JS in the entry point in addition to generated-flow-imports.js
 *   if (typeof flowDefaults.entry.index != "string") {
 *     throw "Unexpected structure in generated webpack config";
 *   }
 *   flowDefaults.entry.index = [flowDefaults.entry.index, "myCustomFile.js"];
 * </code>
 * or add new configuration in the merge block.
 * <code>
 *   module.exports = merge(flowDefaults, {
 *     mode: 'development',
 *     devtool: 'inline-source-map'
 *   });
 * </code>
 */
